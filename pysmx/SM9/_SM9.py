#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author  : 河北雪域网络科技有限公司 A.Star
# @contact: astar@snowland.ltd
# @site: www.snowland.ltd
# @file: _SM9.py
# @time: 2018/10/20 17:23
# @Software: PyCharm


SM9_q = [
	0xB6,0x40,0x00,0x00,0x02,0xA3,0xA6,0xF1,0xD6,0x03,0xAB,0x4F,0xF5,0x8E,0xC7,0x45,
	0x21,0xF2,0x93,0x4B,0x1A,0x7A,0xEE,0xDB,0xE5,0x6F,0x9B,0x27,0xE3,0x51,0x45,0x7D
]

SM9_N = [
	0xB6,0x40,0x00,0x00,0x02,0xA3,0xA6,0xF1,0xD6,0x03,0xAB,0x4F,0xF5,0x8E,0xC7,0x44,
	0x49,0xF2,0x93,0x4B,0x18,0xEA,0x8B,0xEE,0xE5,0x6E,0xE1,0x9C,0xD6,0x9E,0xCF,0x25
]

SM9_P1x = [
	0x93,0xDE,0x05,0x1D,0x62,0xBF,0x71,0x8F,0xF5,0xED,0x07,0x04,0x48,0x7D,0x01,0xD6,
	0xE1,0xE4,0x08,0x69,0x09,0xDC,0x32,0x80,0xE8,0xC4,0xE4,0x81,0x7C,0x66,0xDD,0xDD
]

SM9_P1y = [
	0x21,0xFE,0x8D,0xDA,0x4F,0x21,0xE6,0x07,0x63,0x10,0x65,0x12,0x5C,0x39,0x5B,0xBC,
	0x1C,0x1C,0x00,0xCB,0xFA,0x60,0x24,0x35,0x0C,0x46,0x4C,0xD7,0x0A,0x3E,0xA6,0x16
]

SM9_P2 = [
	0x85,0xAE,0xF3,0xD0,0x78,0x64,0x0C,0x98,0x59,0x7B,0x60,0x27,0xB4,0x41,0xA0,0x1F,
	0xF1,0xDD,0x2C,0x19,0x0F,0x5E,0x93,0xC4,0x54,0x80,0x6C,0x11,0xD8,0x80,0x61,0x41,
	0x37,0x22,0x75,0x52,0x92,0x13,0x0B,0x08,0xD2,0xAA,0xB9,0x7F,0xD3,0x4E,0xC1,0x20,
	0xEE,0x26,0x59,0x48,0xD1,0x9C,0x17,0xAB,0xF9,0xB7,0x21,0x3B,0xAF,0x82,0xD6,0x5B,
	0x17,0x50,0x9B,0x09,0x2E,0x84,0x5C,0x12,0x66,0xBA,0x0D,0x26,0x2C,0xBE,0xE6,0xED,
	0x07,0x36,0xA9,0x6F,0xA3,0x47,0xC8,0xBD,0x85,0x6D,0xC7,0x6B,0x84,0xEB,0xEB,0x96,
	0xA7,0xCF,0x28,0xD5,0x19,0xBE,0x3D,0xA6,0x5F,0x31,0x70,0x15,0x3D,0x27,0x8F,0xF2,
	0x47,0xEF,0xBA,0x98,0xA7,0x1A,0x08,0x11,0x62,0x15,0xBB,0xA5,0xC9,0x99,0xA7,0xC7
]

SM9_t = [
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x58,0xF9,0x8A
]

SM9_a = [
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
]

SM9_b = [
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05
]
class SM9:
    def signature(message, pk, sk):
        hasException = True
        dsa = None
        # epoint *
        S = None
        h2 = None
        r = None
        l = None
        tmp = None
        zero = None

        # Step1 : g = e(P1, Ppub-s)
        cin_ecn2_byte128(Ppubs, masterPublicKey.c_str())
        if (!ZZN12::calcRatePairing(g, Ppubs, param_P1, param_t, norm_X) ) {
        mErrorNum = SM9_ERROR_CALC_RATE
        goto END
        }

        # ifdef SELF_CHECK
        gHex = YHex::Encode(g.toByteArray())
        # endif

        while True:
            # ifdef SELF_CHECK
            rHex = int("033C8616B06704813203DFD00965022ED15975C662337AED648835DC4B1CBE", 16)
            # else
            # Step2: generate r
            bigrand(param_N, r)
            # endif

            # Step3 : calculate w=g^r
            w = np.pow(g, r)
            sw = w.toByteArray()

            # ifdef SELF_CHECK
            wHex = YHex::Encode(sw)

            # endif

            # Step4 : calculate h=H2(M||w,N)
            h = KGC::H2(data, sw)
            cin_big(h2, h.c_str(), h.length())

            # ifdef SELF_CHECK
            h2Hex = YHex::Encode(h)
            # endif

            # Step5 : l=(r-h)mod N
            subtract(r, h2, l)
            divide(l, param_N, tmp)
            while (mr_compare(l, zero) < 0):
                add(l, param_N, l)
                if (mr_compare(l, zero) != 0):
                    break


                # Step6 : S=[l]dSA=(xS,yS)
                cin_epoint(dsa, prikey.c_str())
                ecurve_mult(l, dsa, S)
                s = cout_epoint(S)

                # Step7 : signature=(h,s)
                signature = Signature(h, s)

                hasException = False

            END:
                release_epoint(dsa)
                release_epoint(S)
                release_ecn2(Ppubs)
                release_big(h2)
                release_big(r)
                release_big(l)
                release_big(tmp)
                release_big(zero)

                if (hasException) {
                throw
                exception(getErrorMsg().c_str())

            return signature

        return signature


if __name__ == '__main__':
    pass
